// Code generated by MockGen. DO NOT EDIT.
// Source: cricket/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go -package mockdb cricket/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "cricket/db/sqlc"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockStore) CreatePlayer(arg0 context.Context, arg1 db.CreatePlayerParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockStoreMockRecorder) CreatePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockStore)(nil).CreatePlayer), arg0, arg1)
}

// DeleteAllPlayers mocks base method.
func (m *MockStore) DeleteAllPlayers(arg0 context.Context) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllPlayers", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllPlayers indicates an expected call of DeleteAllPlayers.
func (mr *MockStoreMockRecorder) DeleteAllPlayers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPlayers", reflect.TypeOf((*MockStore)(nil).DeleteAllPlayers), arg0)
}

// GetPlayerOfMostRuns mocks base method.
func (m *MockStore) GetPlayerOfMostRuns(arg0 context.Context) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerOfMostRuns", arg0)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerOfMostRuns indicates an expected call of GetPlayerOfMostRuns.
func (mr *MockStoreMockRecorder) GetPlayerOfMostRuns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerOfMostRuns", reflect.TypeOf((*MockStore)(nil).GetPlayerOfMostRuns), arg0)
}

// GetPlayerOfMostRunsByCareerEndYear mocks base method.
func (m *MockStore) GetPlayerOfMostRunsByCareerEndYear(arg0 context.Context, arg1 sql.NullInt64) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerOfMostRunsByCareerEndYear", arg0, arg1)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerOfMostRunsByCareerEndYear indicates an expected call of GetPlayerOfMostRunsByCareerEndYear.
func (mr *MockStoreMockRecorder) GetPlayerOfMostRunsByCareerEndYear(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerOfMostRunsByCareerEndYear", reflect.TypeOf((*MockStore)(nil).GetPlayerOfMostRunsByCareerEndYear), arg0, arg1)
}

// GetPlayersByCareerYear mocks base method.
func (m *MockStore) GetPlayersByCareerYear(arg0 context.Context, arg1 db.GetPlayersByCareerYearParams) ([]db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByCareerYear", arg0, arg1)
	ret0, _ := ret[0].([]db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersByCareerYear indicates an expected call of GetPlayersByCareerYear.
func (mr *MockStoreMockRecorder) GetPlayersByCareerYear(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByCareerYear", reflect.TypeOf((*MockStore)(nil).GetPlayersByCareerYear), arg0, arg1)
}
